# version: "3.9"

services:
  app:
    env_file: ../.env
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        - DEV=false
    image: app:latest
    container_name: app
    hostname: app
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
      - static-data:/vol/web
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             gunicorn --bind 0.0.0.0:8000 --workers 4 --threads 2 app.wsgi:application"
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_BACKEND_URL=${CELERY_BACKEND_URL:-redis://redis:6379/0}
    networks:
      - app_network
    depends_on:
      - db
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery:
    image: app:latest
    container_name: celery
    hostname: celery
    command: celery -A app worker -l INFO --concurrency=4
    volumes:
      - .:/usr/src/app
    environment:
      - DEBUG=0
      - DJANGO_ALLOWED_HOSTS=appdomain.com
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
    networks:
      - app_network
    depends_on:
      - app
      - redis
    restart: unless-stopped

  celery-beat:
    image: app:latest
    container_name: celery-beat
    hostname: celery-beat
    command: celery -A app beat -l INFO
    volumes:
      - .:/usr/src/app
    environment:
      - DEBUG=0
      - CELERY_BROKER=redis://redis:6379/0
    networks:
      - app_network
    depends_on:
      - app
      - redis
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    command: redis-server --save 60 1 --loglevel warning

  flower:
    image: mher/flower:latest
    container_name: flower
    hostname: flower
    command: celery -A app flower --port=5555
    ports:
      - "5555:5555"
    networks:
      - app_network
    depends_on:
      - redis
      - celery

  db:
    image: postgres:15-alpine
    container_name: db
    hostname: db
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  db-data:
    driver: local
  static-data:
    driver: local
  redis-data:
    driver: local

networks:
  app_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
